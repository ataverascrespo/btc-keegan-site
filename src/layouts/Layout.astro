--- 
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	html {
		font-family: system-ui, sans-serif;
		background: #13151A;
		background-size: 224px;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>


<script>
	//Callback function for intersectionObserver API
	const callback = function (entries) {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				entry.target.classList.add("motion-safe:animate-slideInUp");
			}
		});
	};

	//Create an observer
	const observer = new IntersectionObserver(callback);

	//Observe when the selected element enters viewport
	document.querySelectorAll(".slideIn").forEach(function (target) {
		observer.observe(target);
	});

	//Callback function for intersectionObserver API
	const callback2 = function (entries) {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				entry.target.classList.add("motion-safe:animate-slideInUp");
			}
		});
	};

	//Create an observer
	const observer2 = new IntersectionObserver(callback2);

	//Observe when the selected element enters viewport
	document.querySelectorAll(".zoomIn").forEach(function (target) {
		observer2.observe(target);
	});

</script>